// SPDX-License-Identifier: MIT

pragma solidity >=0.6.00;

// Importing the necessary sol files
import "../core/Ownable.sol";
import "../access/roles/ConsumerRole.sol";
import "../access/roles/DistributorRole.sol";
import "../access/roles/FarmerRole.sol";
import "../access/roles/ProducerRole.sol";
import "../access/roles/InspectorRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is
    Ownable,
    FarmerRole,
    InspectorRole,
    DistributorRole,
    ConsumerRole,
    ProducerRole
{
    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint256 sku_cnt;

    // grape_upc -> grapeItem
    mapping(uint256 => GrapeItem) grapeItems;
    // juice_upc -> juiceItems
    mapping(uint256 => JuiceItem) juiceItems;
    // juice_upc -> grape_upc[]
    mapping(uint256 => uint256[]) juiceGrapes;

    // Define enum 'State' with the following values:
    enum GrapeState {Planted, Harvested, Audited, Processed}
    GrapeState constant defaultGrapeState = GrapeState.Planted;

    enum JuiceState {
        Created,
        Blended,
        Produced,
        Packed,
        Certified,
        ForSale,
        Purchased
    }
    JuiceState constant defaultJuiceState = JuiceState.Created;

    // Define a struct 'GrapeItem' with the following fields:
    struct GrapeItem {
        uint256 sku; // Stock Keeping Unit (SKU)
        uint256 upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through stages
        address originFarmerID; // Metamask-Ethereum address of the Farmer
        string originFarmName; // Farmer Name
        string originFarmInformation; // Farmer Information
        string originFarmLatitude; // Farm Latitude
        string originFarmLongitude; // Farm Longitude
        string harvestNotes; // Harvest Notes
        string auditNotes; // Autit Notes
        GrapeState itemState; // Product State as represented in the enum above
    }

    // Define a struct 'JuiceItem' with the following fields:
    struct JuiceItem {
        uint256 sku; // Stock Keeping Unit (SKU)
        uint256 upc; // Universal Product Code (UPC), generated by the Procuder, goes on the package, can be verified by the Consumer
        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through stages
        uint256 productID; // Product ID potentially a combination of upc + sku
        string productNotes; // Product Notes
        uint256 productPrice; // Product Price
        address producerID; // Metamask-Ethereum address of the Producer
        address distributorID; // Metamask-Ethereum address of the Distributor
        address consumerID; // Metamask-Ethereum address of the Consumer
        string certifyNotes; // Certify Notes
        JuiceState itemState; // Product State as represented in the enum above
    }

    // Define events of Grapes
    event GrapePlanted(uint256 upc);
    event GrapeHarvested(uint256 upc);
    event GrapeAudited(uint256 upc);
    event GrapeProcessed(uint256 upc);

    // Define events of Juices
    event JuiceCreated(uint256 upc);
    event JuiceBlended(uint256 juiceUpc, uint256 grapeUpc);
    event JuiceProduced(uint256 upc);
    event JuicePacked(uint256 upc);
    event JuiceCertified(uint256 upc);
    event JuiceForSale(uint256 upc);
    event JuicePurchased(uint256 upc);

    // Define a modifer that verifies the Caller
    modifier verifyCaller(address _address) {
        require(msg.sender == _address);
        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint256 _price) {
        require(msg.value >= _price);
        _;
    }

    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint256 _upc) {
        _;
        uint256 _price = juiceItems[_upc].productPrice;
        uint256 amountToReturn = msg.value - _price;
        payable(juiceItems[_upc].consumerID).transfer(amountToReturn);
    }

    // Define a modifier that checks if an grapeItem.state of a upc is Planted
    modifier isPlanted(uint256 _upc) {
        require(grapeItems[_upc].itemState == GrapeState.Planted);
        _;
    }

    // Define a modifier that checks if an grapeItem.state of a upc is Harvested
    modifier isHarvested(uint256 _upc) {
        require(grapeItems[_upc].itemState == GrapeState.Harvested);
        _;
    }

    // Define a modifier that checks if an grapeItem.state of a upc is Audited
    modifier isAudited(uint256 _upc) {
        require(grapeItems[_upc].itemState == GrapeState.Audited);
        _;
    }

    // Define a modifier that checks if an grapeItem.state of a upc is Processed
    modifier isProcessed(uint256 _upc) {
        require(grapeItems[_upc].itemState == GrapeState.Processed);
        _;
    }

    // Define a modifier that checks if an juiceItem.state of a upc is Created
    modifier isCreated(uint256 _upc) {
        require(juiceItems[_upc].itemState == JuiceState.Created);
        _;
    }

    // Define a modifier that checks if an juiceItem.state of a upc is Blended
    modifier isBlended(uint256 _upc) {
        require(juiceItems[_upc].itemState == JuiceState.Blended);
        _;
    }

    // Define a modifier that checks if an juiceItem.state of a upc is Produced
    modifier isProduced(uint256 _upc) {
        require(juiceItems[_upc].itemState == JuiceState.Produced);
        _;
    }

    // Define a modifier that checks if an juiceItem.state of a upc is Packed
    modifier isPacked(uint256 _upc) {
        require(juiceItems[_upc].itemState == JuiceState.Packed);
        _;
    }

    // Define a modifier that checks if an juiceItem.state of a upc is Certified
    modifier isCertified(uint256 _upc) {
        require(juiceItems[_upc].itemState == JuiceState.Certified);
        _;
    }

    // Define a modifier that checks if an juiceItem.state of a upc is ForSale
    modifier isForSale(uint256 _upc) {
        require(juiceItems[_upc].itemState == JuiceState.ForSale);
        _;
    }

    // Define a modifier that checks if an juiceItem.state of a upc is Purchased
    modifier isPurchased(uint256 _upc) {
        require(juiceItems[_upc].itemState == JuiceState.Purchased);
        _;
    }

    // In the constructor
    // set 'sku' to 1
    // set 'upc' to 1
    constructor() public payable {
        sku_cnt = 1;
    }

    // Transfer Eth to owner and terminate contract
    function kill() public onlyOwner {
        selfdestruct(payable(owner()));
    }

    // Define a function 'grapePlantedItem' that allows a farmer to mark an item 'Planted'
    function grapePlantedItem(
        uint256 _upc,
        address _originFarmerID,
        string calldata _originFarmName,
        string calldata _originFarmInformation,
        string calldata _originFarmLatitude,
        string calldata _originFarmLongitude
    ) public onlyFarmer {
        // Add the new item as part of Harvest
        grapeItems[_upc].sku = sku_cnt;
        grapeItems[_upc].upc = _upc;
        grapeItems[_upc].ownerID = msg.sender;
        grapeItems[_upc].originFarmerID = _originFarmerID;
        grapeItems[_upc].originFarmName = _originFarmName;
        grapeItems[_upc].originFarmInformation = _originFarmInformation;
        grapeItems[_upc].originFarmLatitude = _originFarmLatitude;
        grapeItems[_upc].originFarmLongitude = _originFarmLongitude;
        // Update state
        grapeItems[_upc].itemState = GrapeState.Harvested;
        // Increment sku
        sku_cnt = sku_cnt + 1;
        // Emit the appropriate event
        emit GrapePlanted(_upc);
    }

    // Define a function 'grapeHarvestItem' that allows a farmer to mark an item 'Harvested'
    function grapeHarvestItem(uint256 _upc, string calldata _harvestNotes)
        public
        onlyFarmer
        isPlanted(_upc)
    {
        // Add the new item as part of Harvest
        grapeItems[_upc].ownerID = msg.sender;
        grapeItems[_upc].harvestNotes = _harvestNotes;
        // Update state
        grapeItems[_upc].itemState = GrapeState.Harvested;
        // Emit the appropriate event
        emit GrapeHarvested(_upc);
    }

    // Define a function 'grapeAuditedItem' that allows a Inspector to mark an item 'Audited'
    function grapeAuditedItem(uint256 _upc, string calldata _auditNotes)
        public
        onlyInspector
        isHarvested(_upc)
    {
        // Add the new item as part of Harvest
        grapeItems[_upc].auditNotes = _auditNotes;
        // Update state
        grapeItems[_upc].itemState = GrapeState.Audited;
        // Emit the appropriate event
        emit GrapeAudited(_upc);
    }

    // Define a function 'grapeProcessItem' that allows a farmer to mark an item 'Processed'
    function grapeProcessItem(uint256 _upc)
        public
        onlyFarmer
        isAudited(_upc)
        verifyCaller(grapeItems[_upc].ownerID) // Call modifier to verify caller of this function
    {
        // Update the appropriate fields
        grapeItems[_upc].itemState = GrapeState.Processed;
        // Emit the appropriate event
        emit GrapeProcessed(_upc);
    }

    function juiceCreateItem(
        uint256 _upc,
        uint256 _productID
    ) public onlyProducer {
        // Add the new item as part of Harvest
        juiceItems[_upc].sku = sku_cnt;
        juiceItems[_upc].upc = _upc;
        juiceItems[_upc].productID = _productID;
        juiceItems[_upc].ownerID = msg.sender;
		// Update state
        juiceItems[_upc].itemState = JuiceState.Created;
        // Increment sku
        sku_cnt = sku_cnt + 1;
        // Emit the appropriate event
        emit JuiceCreated(_upc);
    }

    function juiceBlendItem(uint256 _juiceUpc, uint256 _grapeUpc)
        public
        onlyProducer
		verifyCaller(grapeItems[_juiceUpc].ownerID)
    {
		// Blend the '_juiceUpc' juice with '_grapeUpc' grape
		juiceGrapes[_juiceUpc].push(_grapeUpc);
		// Update state
        juiceItems[_juiceUpc].itemState = JuiceState.Blended;
        // Emit the appropriate event
        emit JuiceBlended(_juiceUpc, _grapeUpc);
    }

	function juiceProduceItem(uint256 _upc, string calldata _productNotes, uint256 _productPrice)
        public
        onlyProducer
		verifyCaller(grapeItems[_upc].ownerID)
		isBlended(_upc)
    {
        juiceItems[_upc].producerID = msg.sender;
        juiceItems[_upc].productNotes = _productNotes;
        juiceItems[_upc].productPrice = _productPrice;
		// Update state
        juiceItems[_upc].itemState = JuiceState.Produced;
        // Emit the appropriate event
        emit JuiceProduced(_upc);
    }

	function juiceCertifyItem(uint256 _upc, string calldata _certifyNotes)
        public
        onlyInspector
		isProduced(_upc)
    {
		juiceItems[_upc].certifyNotes = _certifyNotes;
		// Update state
        juiceItems[_upc].itemState = JuiceState.Certified;
        // Emit the appropriate event
        emit JuiceCertified(_upc);
    }

	function juicePackItem(uint256 _upc)
        public
        onlyProducer
		verifyCaller(grapeItems[_upc].ownerID)
		isCertified(_upc)
    {
		// Update state
        juiceItems[_upc].itemState = JuiceState.Packed;
        // Emit the appropriate event
        emit JuicePacked(_upc);
    }

	function juiceSellItem(uint256 _upc)
        public
        onlyDistributor
		isPacked(_upc)
    {
        juiceItems[_upc].distributorID = msg.sender;
		// Update state
        juiceItems[_upc].itemState = JuiceState.ForSale;
        // Emit the appropriate event
        emit JuiceForSale(_upc);
    }

	function juiceBuyItem(uint256 _upc)
        public
		payable
        onlyConsumer
		isForSale(_upc)
		paidEnough(juiceItems[_upc].productPrice)
		checkValue(_upc)
    {
		juiceItems[_upc].ownerID = msg.sender;
        juiceItems[_upc].consumerID = msg.sender;
		// Update state
        juiceItems[_upc].itemState = JuiceState.Purchased;
        // Transfer money to producer
        uint256 price = juiceItems[_upc].productPrice;
        payable(juiceItems[_upc].producerID).transfer(price);
        // Emit the appropriate event
	    emit JuicePurchased(_upc);
    }

    // Functions to fetch data
    function fetchJuiceItemBufferOne(uint256 _upc)
        external
        view
        returns (
			uint256 sku,
			uint256 upc,
			address ownerID,
			uint256 productID,
			string memory productNotes,
			uint256 productPrice,
			address producerID,
			address distributorID,
			address consumerID,
			string memory certifyNotes,
			uint256[] memory grapes,
			uint256 itemState
        )
    {
			sku			= juiceItems[_upc].sku;
			upc			= juiceItems[_upc].upc;
			ownerID		= juiceItems[_upc].ownerID;
			productID		= juiceItems[_upc].productID;
			productNotes	= juiceItems[_upc].productNotes;
			productPrice	= juiceItems[_upc].productPrice;
			producerID		= juiceItems[_upc].producerID;
			distributorID	= juiceItems[_upc].distributorID;
			consumerID		= juiceItems[_upc].consumerID;
			certifyNotes	= juiceItems[_upc].certifyNotes;
			grapes			= juiceGrapes[_upc];
			itemState		= uint256(juiceItems[_upc].itemState);
        return (
			sku,
			upc,
			ownerID,
			productID,
			productNotes,
			productPrice,
			producerID,
			distributorID,
			consumerID,
			certifyNotes,
			grapes,
			itemState
        );
    }

  
    // Functions to fetch data
    function fetchGrapeItemBufferOne(uint256 _upc)
        public
        view
        returns (
			uint256 sku,
			uint256 upc,
			address ownerID,
			address originFarmerID,
			string memory originFarmName,
			string memory originFarmInformation,
			string memory originFarmLatitude,
			string memory originFarmLongitude
        )
    {
			sku			= grapeItems[_upc].sku;
			upc			= grapeItems[_upc].upc;
			ownerID			= grapeItems[_upc].ownerID;
			originFarmerID	= grapeItems[_upc].originFarmerID;
			originFarmName	= grapeItems[_upc].originFarmName;
			originFarmInformation	= grapeItems[_upc].originFarmInformation;
			originFarmLatitude		= grapeItems[_upc].originFarmLatitude;
			originFarmLongitude		= grapeItems[_upc].originFarmLongitude;
        return (
			sku,
			upc,
			ownerID,
			originFarmerID,
			originFarmName,
			originFarmInformation,
			originFarmLatitude,
			originFarmLongitude
        );
    }


    // Functions to fetch data
    function fetchGrapeItemBufferTwo(uint256 _upc)
        public
        view
        returns (
			string memory harvestNotes,
			string memory auditNotes,
			uint256 itemState
        )
    {
			harvestNotes	= grapeItems[_upc].harvestNotes;
			auditNotes		= grapeItems[_upc].auditNotes;
			itemState 		= uint256(grapeItems[_upc].itemState);
        return (
			harvestNotes,
			auditNotes,
			itemState
        );
    }

}
